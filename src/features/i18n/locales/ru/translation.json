{
  "home": {
    "paragraphs": {
      "1": "GraphiQL - это игровая площадка/IDE для запросов graphQL. ",
      "2": {
        "part1": "Выполнено Валентином Бережных и Яном Черным в качестве",
        "part2": "финального задания",
        "part3": "на",
        "part4": "курсе по React,",
        "part5": "организованном RSSchool."
      }
    }
  },
  "header": {
    "links": {
      "home": "Домой",
      "main": "Главная"
    },
    "buttons": {
      "signout": "Выйти",
      "signin": "Войти",
      "signup": "Регистрация"
    }
  },
  "footer": {
    "text": {
      "part1": "Выполнено",
      "part2": "и",
      "part3": "в 2023"
    }
  },
  "login": {
    "header": {
      "part1": "Нет аккаунта?",
      "part2": "Зарегистрируйся"
    },
    "heading": "Войти",
    "form": {
      "email": "Почта",
      "reset": "Забыли пароль?",
      "password": "Пароль",
      "submit": "Войти"
    },
    "errors": {
      "email": {
        "empty": "Почта не может быть пустой",
        "invalid": "Введенное значение не соответствует формату электронной почты"
      },
      "password": "Пароль не может быть пустым"
    }
  },
  "register": {
    "header": {
      "part1": "Уже есть аккаунт?",
      "part2": "Войти"
    },
    "heading": "Зарегистрироваться",
    "form": {
      "name": "Имя",
      "email": "Почта",
      "password": "Пароль",
      "submit": "Создать Аккаунт"
    },
    "errors": {
      "name": {
        "empty": "Имя не может быть пустым",
        "invalid": "Имя не действительное",
        "minlength": "Имя должно состоять как минимум из 2 символов"
      },
      "email": {
        "empty": "Почта не может быть пустой",
        "invalid": "Введенное значение не соответствует формату электронной почты"
      },
      "password": {
        "empty": "Пароль не может быть пустым",
        "invalid": "Пароль должен состоять как минимум из одной буквы, одной цифры, одного специального символа",
        "minlength": "Пароль должен состоять как минимум из 8 символов"
      }
    }
  },
  "main": {
    "docs": "Документация",
    "request": {
      "heading": "Запрос",
      "validMsg": "Запрос отправлен",
      "extraButton": "Показать(скрыть) заголовки и переменные"
    },
    "headers": "Заголовки",
    "variables": "Переменные",
    "response": {
      "heading": "Ответ",
      "placeholder": "Здесь вы получаете ответ от API"
    },
    "errors": {
      "required": "Обязательное поле! Используйте шаблон",
      "variables": "Используйте переменные с шаблоном типа"
    }
  },
  "firebase": {
    "errors": {
      "wrong-password": "Неправильный пароль",
      "user-not-found": "Пользователь не найден",
      "email-in-use": "Такой адрес электронной почты уже используется"
    }
  },
  "reset": {
    "successMsg": "Ссылка на восстановление пароля отправлена. Вскоре вы будете перенаправлены на страницу авторизации...",
    "header": {
      "part1": "Помните свой пароль?",
      "part2": "Войдите"
    },
    "heading": "Забыли свой пароль?",
    "email": "Почта",
    "errors": {
      "required": "Почта не может быть пустой",
      "invalid": "Введенное значение не соответствует формату электронной почты"
    },
    "submit": "Восстановить Пароль"
  },
  "error": {
    "heading": "Упс...страница не найдена."
  },
  "request": {
    "success": "Запрос успешно отправлен.",
    "fail": "Ошибка запроса."
  },
    "docs": {
      "open": "Начать",
      "button": "Назад",
      "queryFields": {
        "header": "Поля",
        "characterById": "Получить выбранного персонажа по его ID",
        "charactersAll": "Получить список всех персонажей",
        "charactersByIds": "Получить список персонажей по их ids",
        "locationById": "Получить выбранную локацию по её ID",
        "locationsAll": "Получить списко всех локаций",
        "locationsByIds": "Получить список выбранных локаций по их ids",
        "episodeById": "Получить выбранный эпизод по ID",
        "episodesAll": "Получить список всех эпизодов",
        "episodesByIds": "Получить список всех выбранных эпизодов по их ids"
      },
      "characterType": {
        "header": "Поля",
        "characterId": "ID персонажа",
        "characterName": "Имя персонажа",
        "characterStatus": "Статус персонажа(`Жив`, `Мёртв` или `неизвестен`).",
        "characterSpecies": "Вид пресонажа",
        "characterSubType": "Тип подвида персонажа",
        "characterGender": "Пол персонажа (`Женский`, `Мужской`, `Бесполый` или `неизвестен`).",
        "characterOrigin": "Место происхождения персонажа",
        "characterLocation": "Последняя известная локация персонажа",
        "characterImage": "Ссылка на фото персонажа. Все фотографии размером 300x300 пикселей и большинство из них представляют собой средние планы или портреты, поскольку они предназначены для использования в качестве аватаров.",
        "charaterEpisode": "Эпизоды, в которых этот персонаж появлялся",
        "characterCreated": "Время, когда персонаж был создан в базе"
      },
      "locationType": {
        "header": "Поля",
        "locationId": "ID локации.",
        "locationName": "Название локации.",
        "locationSubType": "Тип локации.",
        "locationDimension": "Измерение, в котором расположена локация.",
        "locationResidents": "Список персонажей, которых видели последними на данной локации.",
        "locationCreated": "Время, когда локация была создана в базе."
      },
      "episodeType": {
        "header": "Поля",
        "episodeId": "ID эпизода.",
        "episodeName": "Название эпизода.",
        "episodeAirDate": "Дата выхода эпизода.",
        "episodeCode": "Код эпизода.",
        "episodeCharacters": "Список персонажей в эпизоде.",
        "episodeCreated": "Время, когда эпизод был создан в базе."
      },
      "general": {
        "type": "Тип",
        "arguments": "Аргументы",
        "results": "результат"
      },
      "infoType": {
        "header": "поля",
        "length": "Длина ответа.",
        "amount": "Количество страниц.",
        "next": "Номер следующей страницы, если она существует",
        "previous": "Номер предыдущей страницы, если она существует"
      },
      "filter": {
        "header": "поля",
        "name": "имя",
        "status": "статус",
        "species": "вид",
        "type": "тип",
        "gender": "пол",
        "episode": "эпизод",
        "dimension": "измерение"
      },
      "bottom": {
        "string": "Скалярный тип String представляет текстовые данные в виде последовательностей символов UTF-8. Тип String чаще всего используется GraphQL для представления текста в произвольной форме, удобочитаемого человеком.",
        "int": "Скалярный тип Int представляет целые числовые значения без дробей. Int может представлять значения между -(2^31) и 2^31 - 1.",
        "id": "Скалярный тип ID представляет собой уникальный идентификатор, часто используемый для повторной выборки объекта или в качестве ключа для кэша. Тип идентификатора появляется в ответе JSON как строка; однако это не предназначено быть удобочитаемым для человека. Если в качестве типа ввода ожидается любая строка (например, `4`) или целое число (например, 4) входное значение будет принято в качестве идентификатора."
      }
    }
}
